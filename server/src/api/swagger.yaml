openapi: 3.0.1
info:
  title: Connection Manager API
  description: Connection Manager API
  contact:
    email: ramiro@modusbox.com
  version: 1.6.0
servers:
  - url: http://localhost:3001/api
security:
  - OAuth2:
      - pta
tags:
  - name: dfsp-config
    description: DFSPs setup
  - name: DFSP-client-certificate
    description: DFSP - Client Certificates PKI
  - name: Hub-client-certificate
    description: Hub - Client Certificates PKI
  - name: DFSP-Endpoint-configuration
    description: DFSP - Ingress and Egress endpoint configuration
  - name: DFSP-Certificate-Authority
    description: DFSP Certificate Authority
  - name: Hub-Certificate-Authority
    description: Hub Certificate Authority
  - name: Hub-Endpoint-configuration
    description: Hub - Ingress and Egress endpoint configuration
  - name: Hub-server-certificates-configuration
    description: Hub - Server Certificates config
  - name: DFSP-server-certificates-configuration
    description: DFSP - Server Certificates config
  - name: JWS-certificates-configuration
    description: JWS Certificates
paths:
  /login:
    post:
      tags:
        - login
      summary: Logs the user, returns a JWT payload as JSON
      operationId: loginUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: username.
                password:
                  type: string
                  description: password.
                  format: password
      responses:
        200:
          description: successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: invalid login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      x-swagger-router-controller: Login
  /logout:
    post:
      tags:
        - login
      summary: Logs the user out, clears the JWT cookie
      operationId: logoutUser
      responses:
        204:
          description: successful logout
          content: {}
      x-swagger-router-controller: Login
  /login2step:
    post:
      tags:
        - login
      summary: Logs the user after the 2 factor authentication initial process of
        enrollment
      operationId: login2step
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - generatedToken
                - password
                - username
              properties:
                username:
                  type: string
                  description: username
                password:
                  type: string
                  description: password.
                  format: password
                generatedToken:
                  pattern: ^[0-9]{6}$
                  type: string
                  description: six digit number generated by auth app for two factor
                    authentication
        required: true
      responses:
        200:
          description: successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse2Step'
        400:
          description: 2fa not enabled
          content: {}
        401:
          description: invalid login
          content: {}
        422:
          description: external process error
          content: {}
      x-swagger-router-controller: Login
  /resetPassword:
    post:
      tags:
        - login
      summary: Reset password
      operationId: resetPassword
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - newPassword
                - userguid
                - username
              properties:
                username:
                  type: string
                  description: username
                newPassword:
                  type: string
                  description: new password.
                  format: password
                userguid:
                  type: string
                  description: userguid needed for password change
        required: true
      responses:
        204:
          description: successful password reset and login
          content: {}
        401:
          description: invalid userguid or username
          content: {}
        422:
          description: external process error
          content: {}
      x-swagger-router-controller: Login

  /hub/endpoints:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Returns all Hub endpoints
      operationId: getHubEndpoints
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
  /hub/endpoints/ingress/ips:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get the Hub Ingress IPs
      operationId: getHubIngressIps

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    post:
      tags:
        - Hub-Endpoint-configuration
      summary: Adds a new IP entry to the Hub Ingress endpoint
      description: Adds the entry with state NEW
      operationId: createHubIngressIp

      requestBody:
        description: Hub ingress IP entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointIp'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
  /hub/endpoints/ingress/ips/{epId}:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getHubIngressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    put:
      tags:
        - Hub-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateHubIngressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteHubIngressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      x-swagger-router-controller: HubNetworkConfig
  /hub/endpoints/ingress/urls:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get the Hub Ingress URLs
      operationId: getHubIngressUrls

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointURL'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    post:
      tags:
        - Hub-Endpoint-configuration
      summary: Adds a Hub Ingress URL
      description: Adds a Hub ingress URL with state NEW
      operationId: createHubIngressUrl

      requestBody:
        description: Hub ingress URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputURLValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointURL'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
  /hub/endpoints/ingress/urls/{epId}:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getHubIngressUrlEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    put:
      tags:
        - Hub-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateHubIngressUrlEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputURLValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteHubIngressUrlEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      x-swagger-router-controller: HubNetworkConfig
  /hub/endpoints/egress/ips:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get the Hub Egress IPs
      operationId: getHubEgressIps

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    post:
      tags:
        - Hub-Endpoint-configuration
      summary: Adds a new IP entry to the Hub Egress endpoint
      description: Adds the entry with state NEW
      operationId: createHubEgressIp

      requestBody:
        description: Hub egress IP entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointIp'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
  /hub/endpoints/egress/ips/{epId}:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getHubEgressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    put:
      tags:
        - Hub-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateHubEgressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteHubEgressIpEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      x-swagger-router-controller: HubNetworkConfig
  /hub/endpoints/{epId}:
    get:
      tags:
        - Hub-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getHubEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubNetworkConfig
    put:
      tags:
        - Hub-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateHubEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndPointAny'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      x-swagger-router-controller: HubNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteHubEndpoint
      parameters:
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      x-swagger-router-controller: HubNetworkConfig
  /hub/servercerts:
    get:
      tags:
        - Hub-server-certificates-configuration
      summary: get server certificate
      description: TBD
      operationId: getHubServerCerts

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCert'
        404:
          description: server certs not set
          content: {}
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: HubServerCerts
    post:
      tags:
        - Hub-server-certificates-configuration
      summary: post server certificate
      description: TBD
      operationId: createHubServerCerts

      requestBody:
        description: TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRParameters'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCert'
      x-swagger-router-controller: HubServerCerts
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-server-certificates-configuration
      summary: delete server certificate
      description: TBD
      operationId: deleteHubServerCerts

      responses:
        204:
          description: no content
          content: {}
      x-swagger-router-controller: HubServerCerts
  /hub/ca:
    get:
      tags:
        - Hub-Certificate-Authority
      summary: Returns the Hub CA
      operationId: getHubCA

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubCAInfo'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: HubCAController
    post:
      tags:
        - Hub-Certificate-Authority
      summary: Creates a new Hub CA
      description: |
        Creates a new Hub CA.

        * rootCertificate: a root certificate used by the Hub. Can be a self-signed certificate, or a globally trusted CA like Digicert.
        * intermediateChain: list of intermediate certificates.

        The following combinations are possible

        * no rootCertificate and no intermediateChain: The Hub uses a trusted CA to sign its certificates.
        * rootCertificate and no intermediateChain: The Hub uses a self-signed CA to sign its certificates.
        * no rootCertificate and intermediateChain: The Hub uses a chain of intermediate certificates ultimately signed by a trusted CA to sign its certificates.
        * rootCertificate and intermediateChain: The Hub uses a chain of intermediate certificates ultimately signed by a self-signed CA to sign its certificates.
      operationId: createHubCA

      requestBody:
        description: CA info
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: "#/components/schemas/HubCAInfoInput"
                - $ref: "#/components/schemas/CAInitialInfo"
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubCAInfo'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: HubCAController
      x-codegen-request-body-name: body
    delete:
      tags:
        - Hub-Certificate-Authority
      summary: Deletes the Hub CA
      operationId: deleteHubCA

      responses:
        204:
          description: successful operation
          content: {}
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: HubCAController
  /dfsps/jwscerts:
    get:
      tags:
        - JWS-certificates-configuration
      summary: get JWS certificates for all DFSPs
      description: TBD
      operationId: getAllDfspJWSCerts

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DFSPJWSCert'
        404:
          description: JWS certs not set
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: JWSCerts
  /dfsps:
    get:
      tags:
        - dfsp-config
      summary: Returns a list with all the DFSPs
      operationId: getDFSPs

      responses:
        200:
          description: List of DFSPs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DFSP'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: Pki
    post:
      tags:
        - dfsp-config
      summary: Creates an entry to store DFSP related info
      description: |
        Creates an entry to store DFSP related info

        Returns the newly created object's id
      operationId: createDFSP

      requestBody:
        description: DFSP initial info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPCreate'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreatedResponse'
      x-swagger-router-controller: Pki
      x-codegen-request-body-name: body
  /dfsps/endpoints/unprocessed:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Returns the unprocessed endpoint items
      operationId: getUnprocessedEndpointItems

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointAny'
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/servercerts:
    get:
      tags:
        - DFSP-server-certificates-configuration
      summary: get server certificates for all DFSPs
      description: TBD
      operationId: getAllDfspServerCerts

      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DFSPServerCert'
        404:
          description: server certs not set
          content: {}
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: DfspServerCerts
  /dfsps/{dfspId}:
    put:
      tags:
        - dfsp-config
      summary: Updates DFSP related info
      description: Updates DFSP related info
      operationId: updateDFSP
      parameters:
        - name: dfspId
          in: path
          description: ID of dfsp
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP updated info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPUpdate'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DFSPUpdate'
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: Pki
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/ca:
    get:
      tags:
        - DFSP-Certificate-Authority
      summary: Returns the DFSP CA certificates
      operationId: getDFSPca
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAInfo'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: Pki
    post:
      tags:
        - DFSP-Certificate-Authority
      summary: Sets DFSP CA certificates
      description: |
        Saves the DFSP certificates. Both parameters are optional. It replaces the previous CA if there was one.

        * rootCertificate: a root certificate used by the DFSP. Can be a self-signed certificate, or a globally trusted CA like Digicert.
        * intermediateChain: list of intermediate certificates.

        The following combinations are possible

        * no rootCertificate and no intermediateChain: The DFSP uses a trusted CA to sign its certificates.
        * rootCertificate and no intermediateChain: The DFSP uses a self-signed CA to sign its certificates.
        * no rootCertificate and intermediateChain: The DFSP uses a chain of intermediate certificates ultimately signed by a trusted CA to sign its certificates.
        * rootCertificate and intermediateChain: The DFSP uses a chain of intermediate certificates ultimately signed by a self-signed CA to sign its certificates.
      operationId: setDFSPca
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: CA info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CAInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAInfo'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: Pki
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/enrollments/inbound:
    get:
      tags:
        - DFSP-client-certificate
      summary: Get a list of DFSP Inbound enrollments
      operationId: getDFSPInboundEnrollments
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboundEnrollment'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspInbound
    post:
      tags:
        - DFSP-client-certificate
      summary: Create DFSP Inbound enrollment
      description: Create an InboundEnrollment, associate the CSR to it, and set its
        state to CSR_LOADED. It validates that the CSR Public Key length is at least
        4096 bits and that the CSR signature algorithm is 'sha256WithRSAEncryption'
      operationId: createDFSPInboundEnrollment
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP inbound initial info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPInboundCreate'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreatedResponse'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspInbound
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/enrollments/inbound/{enId}:
    get:
      tags:
        - DFSP-client-certificate
      summary: Get a DFSP Inbound enrollment
      operationId: getDFSPInboundEnrollment
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: enId
          in: path
          description: Enrollment id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboundEnrollment'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspInbound
  /dfsps/{dfspId}/enrollments/inbound/{enId}/sign:
    post:
      tags:
        - DFSP-client-certificate
      summary: Creates a new certificate using the info in the CSR and adds it to
        the enrollment
      description: |
        The Connection Manager creates a Certificate based on the CSR, using the internal CA. It adds this certificate to the enrollment and updates its state to CERT_SIGNED
      operationId: signDFSPInboundEnrollment
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: enId
          in: path
          description: Enrollment id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboundEnrollment'
        400:
          description: validation error
          content: {}
        422:
          description: don't have internal CA
          content: {}
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: DfspInbound
  /dfsps/{dfspId}/enrollments/outbound:
    get:
      tags:
        - Hub-client-certificate
      summary: Get a list of DFSP Outbound enrollments
      operationId: getDFSPOutboundEnrollments
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: state to filter enrollments by
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutboundEnrollment'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspOutbound
  /dfsps/{dfspId}/enrollments/outbound/csr:
    post:
      tags:
        - Hub-client-certificate
      summary: Creates a CSR and a DFSP Outbound enrollment with it
      description: Creates a CSR, signed by the CA. Creates an OutboundEnrollment,
        associate the CSR to it, and set its state to CSR_LOADED.
      operationId: createCSRAndDFSPOutboundEnrollment
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: CSR parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CSRParameters'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreatedResponse'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: DfspOutbound
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/enrollments/outbound/{enId}:
    get:
      tags:
        - Hub-client-certificate
      summary: Get a DFSP Outbound enrollment
      operationId: getDFSPOutboundEnrollment
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: enId
          in: path
          description: Enrollment id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundEnrollment'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspOutbound
  /dfsps/{dfspId}/enrollments/outbound/{enId}/certificate:
    post:
      tags:
        - Hub-client-certificate
      summary: Sets the enrollment certificate
      description: Sets the certificate, and change the enrollment state to CERT_SIGNED.
        Returns the enrollment. This operation doesn't validate the certificate, see
        POST ./validate
      operationId: addDFSPOutboundEnrollmentCertificate
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: enId
          in: path
          description: Enrollment id
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP outbound certificate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundEnrollment'
        400:
          description: validation error
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspOutbound
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/enrollments/outbound/{enId}/validate:
    post:
      tags:
        - Hub-client-certificate
      summary: Validate a DFSP Outbound enrollment
      description: Validate a DFSP Outbound enrollment
      operationId: validateDFSPOutboundEnrollmentCertificate
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: enId
          in: path
          description: Enrollment id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundEnrollment'
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: DfspOutbound
  /dfsps/{dfspId}/endpoints:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Returns all DFSP endpoints
      operationId: getDFSPEndpoints
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/unprocessed:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Returns the unprocessed dfsp items
      operationId: getUnprocessedDfspItems
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/ingress/ips:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get the DFSP Ingress IPs
      operationId: getDFSPIngressIps
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    post:
      tags:
        - DFSP-Endpoint-configuration
      summary: Adds a new IP entry to the DFSP Ingress endpoint
      description: Adds the entry with state NEW
      operationId: createDFSPIngressIp
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP ingress IP entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/endpoints/ingress/ips/{epId}:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getDFSPIngressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    put:
      tags:
        - DFSP-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateDFSPIngressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - DFSP-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteDFSPIngressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/ingress/urls:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get the DFSP Ingress URLs
      operationId: getDFSPIngressUrls
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointURL'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    post:
      tags:
        - DFSP-Endpoint-configuration
      summary: Adds a DFSP Ingress URL
      description: Adds a DFSP ingress URL with state NEW
      operationId: createDFSPIngressUrl
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP ingress URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputURLValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointURL'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/endpoints/ingress/urls/{epId}:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getDFSPIngressUrlEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    put:
      tags:
        - DFSP-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateDFSPIngressUrlEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputURLValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - DFSP-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteDFSPIngressUrlEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/egress/ips:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get the DFSP Egress IPs
      operationId: getDFSPEgressIps
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    post:
      tags:
        - DFSP-Endpoint-configuration
      summary: Adds a new IP entry to the DFSP Egress endpoint
      description: Adds the entry with state NEW
      operationId: createDFSPEgressIp
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: DFSP egress IP entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointIp'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
  /dfsps/{dfspId}/endpoints/egress/ips/{epId}:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getDFSPEgressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    put:
      tags:
        - DFSP-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateDFSPEgressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputIPValue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - DFSP-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteDFSPEgressIpEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/{epId}:
    get:
      tags:
        - DFSP-Endpoint-configuration
      summary: Get an endpoint entry
      operationId: getDFSPEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
    put:
      tags:
        - DFSP-Endpoint-configuration
      summary: Update an endpoint entry
      operationId: updateDFSPEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      requestBody:
        description: endpoint entry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndPointAny'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
      x-codegen-request-body-name: body
    delete:
      tags:
        - DFSP-Endpoint-configuration
      summary: Delete an endpoint entry
      operationId: deleteDFSPEndpoint
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: Endpoint entry id
          required: true
          schema:
            type: string
      responses:
        204:
          description: successful operation
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/endpoints/{epId}/confirmation:
    post:
      tags:
        - DFSP-Endpoint-configuration
      summary: Updates the endpoint as confirmed
      operationId: confirmEndpointItem
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
        - name: epId
          in: path
          description: ID of the endpoint item
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndPointAny'
      security:
        - OAuth2:
            - pta
      x-swagger-router-controller: DfspNetworkConfig
  /dfsps/{dfspId}/servercerts:
    get:
      tags:
        - DFSP-server-certificates-configuration
      summary: get server certificate
      description: TBD
      operationId: getDfspServerCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCert'
        404:
          description: server certs not set
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspServerCerts
    put:
      tags:
        - DFSP-server-certificates-configuration
      summary: put server certificate
      description: TBD
      operationId: updateDfspServerCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseServerCert'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCert'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspServerCerts
      x-codegen-request-body-name: body
    post:
      tags:
        - DFSP-server-certificates-configuration
      summary: post server certificate
      description: TBD
      operationId: createDfspServerCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseServerCert'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCert'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspServerCerts
      x-codegen-request-body-name: body
    delete:
      tags:
        - DFSP-server-certificates-configuration
      summary: delete server certificate
      description: TBD
      operationId: deleteDfspServerCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        204:
          description: no content
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: DfspServerCerts
  /dfsps/{dfspId}/jwscerts:
    get:
      tags:
        - JWS-certificates-configuration
      summary: get JWS certificate
      description: TBD
      operationId: getDfspJWSCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWSCert'
        404:
          description: JWS certs not set
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: JWSCerts
    post:
      tags:
        - JWS-certificates-configuration
      summary: post JWS certificate
      description: TBD
      operationId: createDfspJWSCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      requestBody:
        description: TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseJWSCert'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWSCert'
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: JWSCerts
      x-codegen-request-body-name: body
    delete:
      tags:
        - JWS-certificates-configuration
      summary: delete JWS certificate
      description: TBD
      operationId: deleteDfspJWSCerts
      parameters:
        - name: dfspId
          in: path
          description: DFSP id
          required: true
          schema:
            type: string
      responses:
        204:
          description: no content
          content: {}
      security:
        - OAuth2:
            - mta
            - pta
      x-swagger-router-controller: JWSCerts
  /dfsps/{dfspId}/status:
    get:
      summary: Retrieves dfsp status
      description: Retrieves dfsp status by phase and step completion
      operationId: getDfspStatus
      parameters:
        - name: dfspId
          in: path
          description: ID of the dfsp to get satus
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DfspStatus'
      security:
        - OAuth2:
            - everyone
      x-swagger-router-controller: DfspNetworkConfig
  /monetaryzones:
    get:
      tags:
        - monetaryzones
      summary: Returns the monetary zones supported
      operationId: getMonetaryZones
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonetaryZone'
      x-swagger-router-controller: MonetaryZonesController
  /monetaryzones/{monetaryZoneId}/dfsps:
    get:
      tags:
        - monetaryzones
      summary: Returns all the dfsps for that monetary zone
      operationId: getDfspsByMonetaryZones
      parameters:
        - name: monetaryZoneId
          in: path
          description: ID of monetaryZone
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DFSPCreate'
      x-swagger-router-controller: Pki
components:
  schemas:
    LoginResponse:
      type: object
      properties:
        ok:
          type: boolean
        token:
          type: object
          properties:
            payload:
              type: object
              properties:
                at_hash:
                  type: string
                  description: ""
                aud:
                  type: string
                  description: ""
                sub:
                  type: string
                  description: Subject
                nbf:
                  type: integer
                  description: ""
                azp:
                  type: string
                  description: ""
                amr:
                  type: array
                  description: User groups
                  items:
                    type: string
                iss:
                  type: string
                  description: Issuer
                groups:
                  type: array
                  description: User groups
                  items:
                    type: string
                exp:
                  type: integer
                  description: ""
                iat:
                  type: integer
                  description: ""
                dfspId:
                  type: string
                  description: DFSP id. To be used when calling the API
                userguid:
                  type: string
                  description: GUID to be used for reset password
        userguid:
          type: string
        askPassword:
          type: boolean
        sharedSecret:
          type: string
        issuer:
          type: string
        label:
          type: string
        enrolled:
          type: boolean
        2faEnabled:
          type: boolean
      description: login response
      example:
        ok: true,
        token:
          payload:
            at_hash: bJi28CeD9HLPf1ouOVkQTA
            aud: CLIENT_KEY
            sub: dfsp1
            nbf: 1558709500
            azp: CLIENT_KEY
            amr:
              - password
            iss: https://WSO2_IM_SERVER:9443/oauth2/token
            groups:
              - Application/MTA
              - Application/DFSP:DFSP1
              - Internal/everyone
            exp: 1558713100
            iat: 1558709500
            dfspId: DFSP1
            userguid: userguid
        userguid: userguid
        askPassword: true
        sharedSecret: xxxx
        issuer: MCM
        label: devMCM
        enrolled: true
        2faEnabled: false
    LoginResponse2Step:
      type: object
      properties:
        ok:
          type: boolean
        token:
          type: object
          properties:
            payload:
              type: object
              properties:
                at_hash:
                  type: string
                  description: ""
                aud:
                  type: string
                  description: ""
                sub:
                  type: string
                  description: Subject
                nbf:
                  type: integer
                  description: ""
                azp:
                  type: string
                  description: ""
                amr:
                  type: array
                  description: User groups
                  items:
                    type: string
                iss:
                  type: string
                  description: Issuer
                groups:
                  type: array
                  description: User groups
                  items:
                    type: string
                exp:
                  type: integer
                  description: ""
                iat:
                  type: integer
                  description: ""
                dfspId:
                  type: string
                  description: DFSP id. To be used when calling the API
      description: login2step response
      example:
        ok: true,
        token:
          payload:
            at_hash: bJi28CeD9HLPf1ouOVkQTA
            aud: CLIENT_KEY
            sub: dfsp1
            nbf: 1558709500
            azp: CLIENT_KEY
            amr:
              - password
            iss: https://WSO2_IM_SERVER:9443/oauth2/token
            groups:
              - Application/MTA
              - Application/DFSP:DFSP1
              - Internal/everyone
            exp: 1558713100
            iat: 1558709500
            dfspId: DFSP1
    ValidInvalidState:
      type: boolean
    ValidationState:
      type: string
      enum:
        - VALID
        - INVALID
        - NOT_AVAILABLE
    HubCAInfoInput:
      required:
        - type
      type: object
      properties:
        privateKey:
          type: string
          description: PEM-encoded private key
        rootCertificate:
          type: string
          description: PEM-encoded certificate
        intermediateChain:
          type: string
          description: PEM-encoded certificate
        type:
          type: string
          enum:
            - EXTERNAL
      description: Hub CA Input Body
    HubCAInfo:
      description: Hub CA Input
      allOf:
        - $ref: '#/components/schemas/HubCAInfoInput'
        - type: object
          properties:
            rootCertificate:
              type: string
              description: PEM-encoded certificate
            intermediateChain:
              type: string
              description: PEM-encoded certificate
            rootCertificateInfo:
              $ref: '#/components/schemas/CertInfo'
            intermediateChainInfo:
              type: array
              description: List of CertInfo.
              items:
                $ref: '#/components/schemas/CertInfo'
            validations:
              $ref: '#/components/schemas/ValidationList'
            validationState:
              $ref: '#/components/schemas/ValidationState'
    BaseServerCert:
      type: object
      properties:
        rootCertificate:
          type: string
          description: PEM-encoded root CA certificate
        intermediateChain:
          type: string
          description: PEM-encoded intermediate chain certificats
        serverCertificate:
          type: string
          description: PEM-encoded server certificate
      description: The server certificate.
    ServerCert:
      description: The server certificate, with info and id.
      allOf:
        - $ref: '#/components/schemas/BaseServerCert'
        - type: object
          properties:
            id:
              type: integer
              format: int32
            rootCertificateInfo:
              $ref: '#/components/schemas/CertInfo'
            intermediateChainInfo:
              type: array
              description: List of CertInfo.
              items:
                $ref: '#/components/schemas/CertInfo'
            serverCertificateInfo:
              $ref: '#/components/schemas/CertInfo'
            validations:
              $ref: '#/components/schemas/ValidationList'
            validationState:
              $ref: '#/components/schemas/ValidationState'
            state:
              $ref: '#/components/schemas/ValidInvalidState'
    DFSPServerCert:
      description: The server certificate with the dfpsId.
      allOf:
        - $ref: '#/components/schemas/ServerCert'
        - type: object
          properties:
            dfspId:
              type: string
    BaseJWSCert:
      required:
        - publicKey
      type: object
      properties:
        publicKey:
          type: string
          description: PEM-encoded JWS public key
      description: JWS Certificate.
    JWSCert:
      description: The JWS public key, with info and id.
      allOf:
        - $ref: '#/components/schemas/BaseJWSCert'
        - type: object
          properties:
            validations:
              $ref: '#/components/schemas/ValidationList'
            validationState:
              $ref: '#/components/schemas/ValidationState'
    DFSPJWSCert:
      description: The JWS certificate with the dfpsId.
      allOf:
        - $ref: '#/components/schemas/JWSCert'
        - type: object
          properties:
            dfspId:
              type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        type:
          type: string
      example:
        code: 0
        message: message
        type: type
    DFSPCreate:
      type: object
      properties:
        dfspId:
          type: string
          description: DFSP identifier on Hub
        name:
          type: string
          description: Informal name
        monetaryZoneId:
          type: string
          description: The monetary Zone
        securityGroup:
          type: string
          description: OAuth role/group owner
      example:
        dfspId: DFSP1
        name: DFSP 1
        monetaryZoneId: EUR
    DFSPUpdate:
      type: object
      properties:
        name:
          type: string
          description: Informal name
        monetaryZoneId:
          type: string
          description: The monetary Zone
      example:
        name: DFSP 1
        monetaryZoneId: EUR
    DFSP:
      type: object
      properties:
        id:
          type: string
          description: DFSP identifier on Hub
        name:
          type: string
          description: Informal name
        monetaryZoneId:
          type: string
          description: The monetary Zone
        securityGroup:
          type: string
          description: DFSP Security group
      example:
        id: DFSP2
        name: DFSP2
        monetaryZoneId: EUR
        securityGroup: Application/DFSP:DFSP2
    DFSPInboundCreate:
      type: object
      properties:
        clientCSR:
          type: string
          description: PEM encoded CSR
    Certificate:
      type: object
      properties:
        certificate:
          type: string
          description: PEM encoded
    InboundCertificate:
      allOf:
        - $ref: '#/components/schemas/Certificate'
        - type: object
          properties:
            hubCAId:
              type: integer
              description: Hub CA Id which created the Certificate
    InboundEnrollment:
      type: object
      properties:
        certificate:
          type: string
          description: PEM encoded
        csr:
          type: string
          description: PEM encoded
        state:
          type: string
          enum:
            - NEW
            - CSR_LOADED
            - CERT_SIGNED
            - INVALID
        certInfo:
          $ref: '#/components/schemas/CertInfo'
        csrInfo:
          $ref: '#/components/schemas/CSRInfo'
    ObjectCreatedResponse:
      type: object
      properties:
        id:
          type: integer
          description: Object ID
      example:
        id: 42
    OutboundEnrollment:
      type: object
      properties:
        id:
          type: integer
        certificate:
          type: string
          description: PEM encoded
        csr:
          type: string
          description: PEM encoded
        certInfo:
          $ref: '#/components/schemas/CertInfo'
        csrInfo:
          $ref: '#/components/schemas/CSRInfo'
        state:
          $ref: '#/components/schemas/ValidInvalidState'
        validations:
          $ref: '#/components/schemas/ValidationList'
        validationState:
          $ref: '#/components/schemas/ValidationState'
    CertificateChain:
      type: object
      required:
        - certificateChain
      properties:
        certificateChain:
          description: PEM-encoded certificate chain
          oneOf:
            - type: string
            - type: array
              items:
                type: string
    CAInfo:
      type: object
      properties:
        rootCertificate:
          type: string
          description: PEM-encoded certificate
        intermediateChain:
          type: string
          description: PEM-encoded certificate
        privateKey:
          type: string
          description: PEM-encoded private key
        validations:
          $ref: '#/components/schemas/ValidationList'
        validationState:
          $ref: '#/components/schemas/ValidationState'
    RootCACert:
      type: object
      properties:
        id:
          type: integer
          description: Object id
        certificate:
          type: string
          description: PEM-encoded certificate
        certInfo:
          $ref: '#/components/schemas/CertInfo'
    CA_csr_dn:
      required:
        - CN
        - O
      type: object
      properties:
        CN:
          type: string
          description: Common Name
        O:
          type: string
          description: Organization
        OU:
          type: string
          description: Organizational Unit
        C:
          type: string
          description: Country
        ST:
          type: string
          description: State
        L:
          type: string
          description: Location
      description: Certificate Authority subject info
    CA_csr_key:
      required:
        - algo
        - size
      type: object
      properties:
        algo:
          type: string
          enum:
            - rsa
            - ecdsa
        size:
          type: integer
          format: int64
      description: |
        Key generation parameters
      example:
        size: 4096
        algo: rsa
    CAInitialInfo:
      required:
        - csr
      type: object
      properties:
        default:
          type: object
          properties:
            expiry:
              type: string
              description: 'This should contain a time duration in the form understood
                by Go''s time package ( https://golang.org/pkg/time/#ParseDuration
                ). This unfortunately means that the maximum unit of time that can
                be used here is the hour. Example 8760h ( = 1 year ). Default: "87600h",
                // 10 years'
            usages:
              type: array
              description: Key usages
              items:
                type: string
                enum:
                  - signing
                  - key encipherment
                  - server auth
                  - client auth
            signature_algorithm:
              type: string
              description: Signature algorithm to use when signing certificates.
              enum:
                - SHA256WithRSA
                - SHA512WithRSA
          description: To be used as default when generating keys, CSRs and certs
        csr:
          required:
            - hosts
            - key
            - names
          type: object
          properties:
            hosts:
              type: array
              description: List of hostnames.
              items:
                type: string
            names:
              maxItems: 1
              minItems: 1
              type: array
              description: List of DN names.
              items:
                $ref: '#/components/schemas/CA_csr_dn'
            key:
              $ref: '#/components/schemas/CA_csr_key'
          description: CA root certificate parameters
      description: CA initial parameters
    URLEntry:
      type: object
      properties:
        url:
          type: string
          description: URL
    IPEntry:
      type: object
      properties:
        address:
          pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))?$
          type: string
          description: 'A single IP address or a set of address using CIDR notation  IP:
            a.b.c.d where 0 <= [a,b,c,d] <= 255 CIDR: a.b.c.d/e where 0 <= [a,b,c,d]
            <= 255, and 0 <= e <= 32'
          example: 163.10.24.28/30
        ports:
          type: array
          description: List of ports or port ranges
          example:
            - "80"
            - 8000-8080
          items:
            type: string
            description: Individual port or port range
            example: 8000-8080
    BaseEndpoint:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - IP
            - URL
        direction:
          type: string
          enum:
            - INGRESS
            - EGRESS
        state:
          type: string
          enum:
            - NEW
            - CONFIRMED
            - INVALID
        createdDate:
          type: string
          format: date-time
        createdBy:
          type: string
        dfspId:
          type: string
      description: Common properties to both IP and URL endpoints
    EndPointIp:
      allOf:
        - $ref: '#/components/schemas/BaseEndpoint'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/IPEntry'
    EndPointURL:
      allOf:
        - $ref: '#/components/schemas/BaseEndpoint'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/URLEntry'
    EndPointAny:
      allOf:
        - $ref: '#/components/schemas/BaseEndpoint'
        - type: object
          properties:
            value:
              type: object
              description: It's *either* {url} OR {address and ports}.
              allOf:
                - $ref: '#/components/schemas/IPEntry'
                - $ref: '#/components/schemas/URLEntry'
    InputIPValue:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/IPEntry'
    InputURLValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/URLEntry'
    CSRParameters:
      type: object
      properties:
        subject:
          required:
            - CN
          type: object
          properties:
            CN:
              type: string
              description: Common Name
            E:
              type: string
              description: email address
            O:
              type: string
              description: Organization
            OU:
              type: string
              description: Organizational Unit
            C:
              type: string
              description: Country
            ST:
              type: string
              description: State
            L:
              type: string
              description: Location
          description: CSR Subject
        extensions:
          type: object
          properties:
            subjectAltName:
              type: object
              properties:
                dns:
                  type: array
                  description: Array of DNS names
                  items:
                    type: string
                    description: DNS name
                ips:
                  type: array
                  description: Array of IPs
                  items:
                    type: string
                    description: IP address
              description: Subject alternative names extension. See https://www.openssl.org/docs/manmaster/man5/x509v3_config.html#Subject-Alternative-Name
          description: X.509 extensions.
      description: Parameters used to create the CSR
    CertInfo:
      type: object
      properties:
        subject:
          type: object
          properties:
            CN:
              type: string
              description: Common Name
            E:
              type: string
              description: email address
            O:
              type: string
              description: Organization
            OU:
              type: string
              description: Organizational Unit
            C:
              type: string
              description: Country
            ST:
              type: string
              description: State
            L:
              type: string
              description: Location
        issuer:
          type: object
          properties:
            CN:
              type: string
              description: Common Name
            E:
              type: string
              description: email address
            O:
              type: string
              description: Organization
            OU:
              type: string
              description: Organizational Unit
            C:
              type: string
              description: Country
            ST:
              type: string
              description: State
            L:
              type: string
              description: Location
        subjectAlternativeNames:
          type: array
          items:
            type: string
        serialNumber:
          type: string
          example: "17159976289428250189079625547205715159"
        notBefore:
          type: string
          description: ISO date format
          example: 2019-02-04T00:00:00Z
        notAfter:
          type: string
          description: ISO date format
          example: 2020-02-12T12:00:00Z
        signatureAlgorithm:
          type: string
          example: SHA256WithRSA
      description: Certificate contents and info
    CSRInfo:
      type: object
      properties:
        subject:
          type: object
          properties:
            CN:
              type: string
              description: Common Name
            E:
              type: string
              description: email address
            O:
              type: string
              description: Organization
            OU:
              type: string
              description: Organizational Unit
            C:
              type: string
              description: Country
            ST:
              type: string
              description: State
            L:
              type: string
              description: Location
        extensions:
          type: object
          properties:
            subjectAltName:
              type: object
              properties:
                dns:
                  type: array
                  items:
                    type: string
                ips:
                  type: array
                  items:
                    type: string
                    example: 163.10.5.24
                emailAddresses:
                  type: array
                  items:
                    type: string
                    example: pki@modusbox.live
                uris:
                  type: array
                  items:
                    type: string
                    example: https://modusbox.live
      description: CSR contents and info
    Statuses:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - COMPLETED
    Phases:
      type: string
      enum:
        - BUSINESS_SETUP
        - TECHNICAL_SETUP
    Identifier:
      type: string
      enum:
        - ID_GENERATION
        - ENDPOINTS
        - CSR_EXCHANGE
        - CERTIFICATE_AUTHORITY
        - SERVER_CERTIFICATES_EXCHANGE
        - JWS_CERTIFICATES
    DfspStatus:
      type: object
      properties:
        phase:
          $ref: '#/components/schemas/Phases'
        steps:
          type: array
          items:
            type: object
            properties:
              identifier:
                $ref: '#/components/schemas/Identifier'
              status:
                $ref: '#/components/schemas/Statuses'
    ValidationCodes:
      type: string
      description: Identifies the type of validation
      enum:
        - CSR_CERT_SAME_PUBLIC_KEY
        - CSR_CERT_SAME_SUBJECT_INFO
        - CSR_CERT_PUBLIC_PRIVATE_KEY_MATCH
        - CERTIFICATE_SIGNED_BY_DFSP_CA
        - CERTIFICATE_VALIDITY
        - CERTIFICATE_USAGE_CLIENT
        - CSR_SIGNATURE_VALID
        - CSR_PUBLIC_KEY_LENGTH
        - CSR_SIGNATURE_ALGORITHM
        - CERTIFICATE_USAGE_SERVER
        - CERTIFICATE_CHAIN
        - CA_CERTIFICATE_USAGE
        - CERTIFICATE_VALID_OCSP
        - CERTIFICATE_VALID_CRL
    ValidationCodesDescription:
      type: array
      items:
        type: object
        properties:
          validationCode:
            $ref: '#/components/schemas/ValidationCodes'
          description:
            type: string
    Validation:
      required:
        - message
        - performed
        - result
        - validationCode
      type: object
      properties:
        validationCode:
          $ref: '#/components/schemas/ValidationCodes'
        performed:
          type: boolean
          description: Whether the validation has been performed or not
        result:
          type: string
          enum:
            - VALID
            - INVALID
            - NOT_AVAILABLE
        message:
          type: string
          description: Textual description of the validation result
        messageTemplate:
          type: string
          description: Textual description of the validation result, using the JavaScript
            template literal format
        data:
          type: object
          properties: {}
          description: validation-specific data. Could be used by the UI to show more
            detail to the user
        details:
          type: string
          description: Command output or some other details about the validation
    ValidationList:
      type: array
      items:
        $ref: '#/components/schemas/Validation'
    MonetaryZone:
      type: object
      properties:
        monetaryZoneId:
          pattern: ^[A-Z]{3}$
          type: string
        name:
          type: string
      example:
        monetaryZoneId: EUR
        name: Euro
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://WSO2_IM_SERVERl:9443/oauth2/token
          scopes:
            pta: Portal Technical Administrator
            mta: Mojabox Technical Administrator
            everyone: All logged in users
x-components:
  requestBodies:
    CA:
      description: CA initial info
      in: body
      name: body
      required: true
      schema:
        $ref: '#/components/schemas/CAInitialInfo'
    DFSP:
      description: DFSP initial info
      in: body
      name: body
      required: true
      schema:
        $ref: '#/components/schemas/DFSPCreate'
    DFSPInbound:
      description: DFSP inbound initial info
      in: body
      name: body
      required: true
      schema:
        $ref: '#/components/schemas/DFSPInboundCreate'
