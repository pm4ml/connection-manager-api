name: Auto-Publish to GHCR after CircleCI

on:
  status:
  check_suite:
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    if: github.event.state == 'success' || github.event.check_suite.conclusion == 'success'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Filter CircleCI success events
      id: filter
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Context: ${{ github.event.context }}"
        echo "State: ${{ github.event.state }}"
        echo "Check suite: ${{ github.event.check_suite.app.name }}"
        
        # Check if this is a CircleCI success event
        if [[ "${{ github.event_name }}" == "status" ]]; then
          if [[ "${{ github.event.context }}" == *"circleci"* ]] && [[ "${{ github.event.state }}" == "success" ]]; then
            echo "circleci_success=true" >> $GITHUB_OUTPUT
            echo "sha=${{ github.event.sha }}" >> $GITHUB_OUTPUT
          else
            echo "circleci_success=false" >> $GITHUB_OUTPUT
          fi
        elif [[ "${{ github.event_name }}" == "check_suite" ]]; then
          if [[ "${{ github.event.check_suite.app.name }}" == *"CircleCI"* ]] && [[ "${{ github.event.check_suite.conclusion }}" == "success" ]]; then
            echo "circleci_success=true" >> $GITHUB_OUTPUT
            echo "sha=${{ github.event.check_suite.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "circleci_success=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "circleci_success=false" >> $GITHUB_OUTPUT
        fi

    - name: Get tag information
      id: tag-info
      if: steps.filter.outputs.circleci_success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const sha = '${{ steps.filter.outputs.sha }}';
          console.log(`Looking for tags for commit: ${sha}`);
          
          try {
            // Get all tags for the repository
            const { data: refs } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/'
            });
            
            // Find tags that point to this commit
            const matchingTags = [];
            for (const ref of refs) {
              if (ref.object.sha === sha) {
                const tagName = ref.ref.replace('refs/tags/', '');
                matchingTags.push(tagName);
              }
            }
            
            console.log(`Found matching tags: ${matchingTags.join(', ')}`);
            
            if (matchingTags.length === 0) {
              console.log('No tags found for this commit, skipping image build');
              return { shouldBuild: false };
            }
            
            // Prefer version tags (v*) over other tags
            const versionTags = matchingTags.filter(tag => tag.startsWith('v'));
            const selectedTag = versionTags.length > 0 ? versionTags[0] : matchingTags[0];
            
            console.log(`Selected tag for build: ${selectedTag}`);
            
            const isSnapshot = selectedTag.includes('snapshot');
            
            return {
              shouldBuild: true,
              tag: selectedTag,
              isSnapshot: isSnapshot
            };
          } catch (error) {
            console.error('Error getting tag info:', error);
            return { shouldBuild: false };
          }

    - name: Checkout repository
      if: steps.tag-info.outputs.shouldBuild == 'true'
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.tag-info.outputs.tag }}

    - name: Set up Docker Buildx
      if: steps.tag-info.outputs.shouldBuild == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: steps.tag-info.outputs.shouldBuild == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: steps.tag-info.outputs.shouldBuild == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.tag-info.outputs.tag }}
          type=raw,value=latest,enable=${{ steps.tag-info.outputs.isSnapshot == 'false' }}
          type=raw,value=snapshot,enable=${{ steps.tag-info.outputs.isSnapshot == 'true' }}
        labels: |
          org.opencontainers.image.title=Connection Manager API
          org.opencontainers.image.description=Connection Manager API - Auto-built after CircleCI success

    - name: Get Node.js version 
      if: steps.tag-info.outputs.shouldBuild == 'true'
      id: node-version
      run: |
        if [ -f .nvmrc ]; then
          echo "NODE_VERSION=$(cat .nvmrc)-alpine" >> $GITHUB_OUTPUT
        else
          echo "NODE_VERSION=lts-alpine" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.tag-info.outputs.shouldBuild == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NODE_VERSION=${{ steps.node-version.outputs.NODE_VERSION }}
          API_BUILD=${{ github.run_number }}
          API_COMMIT=${{ steps.filter.outputs.sha }}
          API_DESCRIBE=${{ steps.tag-info.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output published images
      if: steps.tag-info.outputs.shouldBuild == 'true'
      run: |
        echo "Successfully published Docker images to GHCR after CircleCI completion:"
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do
          echo "  - $tag"
        done
        echo ""
        echo "Tag: ${{ steps.tag-info.outputs.tag }}"
        echo "Commit: ${{ steps.filter.outputs.sha }}"
        echo "Is Snapshot: ${{ steps.tag-info.outputs.isSnapshot }}" 