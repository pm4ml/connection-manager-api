name: Run Local Test Functional Job

on:
  workflow_call: {}
  
env:
  IMAGE_NAME: ${{github.event.repository.name}}
  IMAGE_TAG: ${{ github.sha }}
  APP_WORK_DIRECTORY: .
  APP_CACHE_NAME: cache-app-node-modules
  APP_SCRIPT_DIRECTORY: scripts
  TEST_FUNC_WORK_DIRECTORY: test/functional-tests
  NODE_VERSION: 20.15.1

jobs:

  build-node:
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: npm
          cache-dependency-path: ${{env.APP_WORK_DIRECTORY}}/package-lock.json

      # Actions
      - name: Install App dependencies
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm i

  build-docker:
    runs-on: ubuntu-latest
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Actions
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          outputs: type=docker,dest=/tmp/${{env.IMAGE_NAME}}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{env.IMAGE_NAME}}-${{env.IMAGE_TAG}}
          path: /tmp/${{env.IMAGE_NAME}}.tar

  test_func:
    runs-on: ubuntu-latest
    needs:
      - build-node
      - build-docker
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{env.IMAGE_NAME}}-${{env.IMAGE_TAG}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/${{env.IMAGE_NAME}}.tar
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: npm
          cache-dependency-path: ${{env.APP_WORK_DIRECTORY}}/package-lock.json
      - name: Install App dependencies
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm i
      - name: Install Functional-tests dependencies
        working-directory: ${{env.TEST_FUNC_WORK_DIRECTORY}}
        run: npm i

      # Actions
      - name: Start backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run backend:start

      - name: Start App
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: |
          VAULT_DIR="`pwd`/docker/vault/tmp"
          docker run --net=host -d --rm --name ${{env.IMAGE_NAME}} --env-file ./docker/functional-tests.env -v $VAULT_DIR:/tmp/vault ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
      - name: Wait for App
        uses: cygnetdigital/wait_for_response@v2.0.0
        with:
          url: http://localhost:3001/docs
          responseCode: 200
          timeout: 10000
          interval: 500

      - name: Validate Functional Tests
        working-directory: ${{env.TEST_FUNC_WORK_DIRECTORY}}
        run: npm test

      - name: Upload Test Results to GitHub
        uses: actions/upload-artifact@master
        with:
          name: junit.xml
          path: ${{env.TEST_FUNC_WORK_DIRECTORY}}/junit.xml

      # Cleanup
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: '/tmp/logs'
      - name: Tar logs
        if: failure()
        run: tar cvzf /tmp/logs.tgz /tmp/logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: /tmp/logs.tgz

      - name: Stop backends
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: npm run backend:stop

      - name: Stop App
        working-directory: ${{env.APP_WORK_DIRECTORY}}
        run: docker stop ${{env.IMAGE_NAME}}  
